package com.kedialabs.domain;

import java.sql.Timestamp;

import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.MappedSuperclass;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;

import org.activejpa.entity.Model;
import org.codehaus.jackson.annotate.JsonIgnore;

@MappedSuperclass
public class BaseDomain extends Model {

    private Long id;

    private Timestamp createdAt;
    
    private Timestamp updatedAt;
    
    private String createdBy;
    
    private String updatedBy;

    @Override
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    public Long getId() {
        return id;
    }

    // given that id is autogenerated, we should 
    // not expose an id setter, making it protected
    // as discussed with @ganeshs
    protected void setId(Long id) {
        this.id = id;
    }
    
    
    /**
     * @return the createdAt
     */
    @JsonIgnore
    public Timestamp getCreatedAt() {
        return createdAt;
    }

    /**
     * @param createdAt the createdAt to set
     */
    public void setCreatedAt(Timestamp createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * @return the updatedAt
     */
    @JsonIgnore
    public Timestamp getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @param updatedAt the updatedAt to set
     */
    public void setUpdatedAt(Timestamp updatedAt) {
        this.updatedAt = updatedAt;
    }
    
    @JsonIgnore
    public String getCreatedBy(){
        return createdBy;
    }
    
    public void setCreatedBy(String createdBy){
        this.createdBy = createdBy;
    }
    
    @JsonIgnore
    public String getUpdatedBy(){
        return updatedBy;
    }
    
    public void setUpdatedBy(String updatedBy){
        this.updatedBy = updatedBy;
    }

    @PrePersist
    public void prePersist() {
        Timestamp currentTime = new Timestamp(System.currentTimeMillis());
        setCreatedAt(currentTime);
        setUpdatedAt(currentTime);
    }
    
    @PreUpdate
    public void preUpdate() {
        setUpdatedAt(new Timestamp(System.currentTimeMillis()));
    }
    
}
